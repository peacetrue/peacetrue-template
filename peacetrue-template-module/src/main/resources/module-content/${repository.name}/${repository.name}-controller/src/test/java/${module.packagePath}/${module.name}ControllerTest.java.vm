package ${module.packageName};

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.SneakyThrows;
import org.jeasy.random.EasyRandom;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/**
 * @author peace
 */
@SpringBootTest(classes = {${repository.packageName}.${repository.domainName}ControllerTestAutoConfiguration.class, ${module.name}ControllerTest.ServiceConfiguration.class})
@AutoConfigureMockMvc
@ActiveProfiles("${uc.lh(${repository.domainName})}-controller-test")
class ${module.name}ControllerTest {

    private static final EasyRandom EASY_RANDOM = new EasyRandom();

    public static class ServiceConfiguration {
        @Bean
        @Primary
        public ${module.name}Service ${uc.lc(${module.name})}Service() {
            return Mockito.mock(${module.name}Service.class);
        }
    }

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;

    @Test
    @SneakyThrows
    void add() {
        this.mockMvc.perform(
                        MockMvcRequestBuilders.post("/${uc.lh(${module.name})}s")
                                .contentType(MediaType.APPLICATION_JSON)
                                .content(objectMapper.writeValueAsString(EASY_RANDOM.nextObject(${module.name}Add.class)))
                )
                .andExpect(status().isOk())
        ;
    }

    @Test
    @SneakyThrows
    void queryForPage() {
        this.mockMvc.perform(MockMvcRequestBuilders.get("/${uc.lh(${module.name})}s"))
                .andExpect(status().isOk())

        ;
    }

    @Test
    @SneakyThrows
    void queryForList() {
        this.mockMvc.perform(MockMvcRequestBuilders.get("/${uc.lh(${module.name})}s").queryParam("rtn", "list"))
                .andExpect(status().isOk())
        ;
    }

    @Test
    @SneakyThrows
    void get() {
        this.mockMvc.perform(MockMvcRequestBuilders.get("/${uc.lh(${module.name})}s/1"))
                .andExpect(status().isOk())

        ;
    }

    @Test
    @SneakyThrows
    void modify() {
        this.mockMvc.perform(
                        MockMvcRequestBuilders.put("/${uc.lh(${module.name})}s")
                                .contentType(MediaType.APPLICATION_JSON)
                                .content(objectMapper.writeValueAsString(EASY_RANDOM.nextObject(${module.name}Modify.class)))
                )
                .andExpect(status().isOk())

        ;
    }

    @Test
    @SneakyThrows
    void delete() {
        this.mockMvc.perform(
                        MockMvcRequestBuilders.delete("/${uc.lh(${module.name})}s/1")
                )
                .andExpect(status().isOk())

        ;
    }
}
